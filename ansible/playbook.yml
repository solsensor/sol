---
- hosts: lambda
  become: true

  vars:
    ansible_python_interpreter: python3
    letsencrypt_email: letsencrypt@mail.ryanchipman.com
    domain_name: dev.solsensor.com

  vars_files:
    - vars/creds-encrypted.yml

  pre_tasks:
    - raw: apt-get install -y python-simplejson

  tasks:
    - name: Upgrade system
      tags: [ provision ]
      apt: upgrade=dist update_cache=yes

    - name: Install nginx
      tags: [ provision ]
      apt: name=nginx state=latest

    - name: install letsencrypt
      tags: [ provision ]
      apt: name=letsencrypt state=latest

    - name: create letsencrypt directory
      tags: [ provision ]
      file: name=/var/www/letsencrypt state=directory

    - name: Remove default nginx config
      tags: [ provision ]
      file: name=/etc/nginx/sites-enabled/default state=absent

    - name: Install system nginx config
      tags: [ provision ]
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf

    - name: Install nginx site for letsencrypt requests
      tags: [ provision ]
      template:
        src: templates/nginx-http.j2
        dest: /etc/nginx/sites-enabled/http

    - name: Reload nginx to activate letsencrypt site
      tags: [ provision ]
      service: name=nginx state=restarted

    - name: Create letsencrypt certificate
      tags: [ provision ]
      shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }}
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}

    - name: Generate dhparams
      tags: [ provision ]
      shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
      args:
        creates: /etc/nginx/dhparams.pem

    - name: Install nginx site for specified site
      tags: [ provision ]
      template:
        src: templates/nginx-le.j2
        dest: /etc/nginx/sites-enabled/le

    - name: Reload nginx to activate specified site
      tags: [ provision ]
      service: name=nginx state=restarted

    - name: Add letsencrypt cronjob for cert renewal
      tags: [ provision ]
      cron:
        name: letsencrypt_renewal
        special_time: weekly
        job: letsencrypt --renew certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} && service nginx reload

    - name: Ensure pip3 installed
      tags: [ install ]
      apt:
        name: python3-pip
        state: latest

    - name: Ensure botocore and boto3 are installed
      tags: [ install ]
      pip:
        name: [ boto3, botocore ]
        extra_args: --user

    - name: Download Rocket.toml
      tags: [ deploy ]
      aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        bucket: solsensor-ci
        object: /artifacts/master/Rocket.toml
        dest: /sol/Rocket.toml
        mode: get

    - name: Download sol binary
      tags: [ deploy ]
      aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        bucket: solsensor-ci
        object: /artifacts/master/target/debug/sol
        dest: /sol/sol
        mode: get

    - name: Ensure binary executable
      tags: [ deploy ]
      file:
        path: /sol/sol
        mode: 777

    - name: Create systemd unit file
      tags: [ deploy ]
      template:
        src: templates/sol.service.j2
        dest: /etc/systemd/system/sol.service

    - name: Restart sol service
      tags: [ deploy ]
      systemd:
        name: sol
        daemon_reload: true
        state: restarted
